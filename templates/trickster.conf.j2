# [main]

## instance_id allows you to run multiple Trickster processes on the same host and log to separate files
## Useful for baremetal, not so much for elastic deployments, so only uncomment if you really need it
## default is 0, which means ignored
#instance_id = 0

## config_handler_path provides the HTTP path to view a read-only printout of the running configuration
## which can be reached at http://your-trickster-endpoint:port/$config_handler_path
## default is '/trickster/config'
# config_handler_path = '/trickster/config'

## ping_handler_path provides the HTTP path you will use to perform an uptime health check against Trickster
## which can be reached at http://your-trickster-endpoint:port/$ping_handler_path
## default is '/trickster/ping'
# ping_handler_path = '/trickster/ping'


# Configuration options for the Trickster Frontend
[frontend]

# listen_port defines the port on which Trickster's Front-end HTTP Proxy server listens.
listen_port = {{ trickster_listen_port }}

## listen_address defines the ip on which Trickster's Front-end HTTP Proxy server listens.
## empty by default, listening on all interfaces
listen_address = '{{ trickster_listen_address }}'

## tls_listen_address defines the ip on which Trickster's Front-end TLS Proxy server listens.
## empty by default, listening on all interfaces
# tls_listen_address = ''

## tls_listen_port defines the port on which Trickster's Front-end TLS Proxy server listens.
## The default is 0, which means TLS is not used, even if certificates are configured below.
# tls_listen_port = 0

## connections_limit defines the maximum number of concurrent connections
## Trickster's Proxy server may handle at any time.
## 0 by default, unlimited.
# connections_limit = 0

# [caches]

    # [caches.default]
    ## cache_type defines what kind of cache Trickster uses
    ## options are 'bbolt', 'badger', 'filesystem', 'memory', and 'redis'
    ## The default is 'memory'.
    # cache_type = 'memory'

        ### Configuration options for the Cache Index
        ## The Cache Index handles key management and retention for bbolt, filesystem and memory
        ## Redis and BadgerDB handle those functions natively and does not use the Trickster's Cache Index
        # [caches.default.index]

        ## reap_interval_secs defines how long the Cache Index reaper sleeps between reap cycles. Default is 3 (3s)
        # reap_interval_secs = 3

        ## flush_interval_secs sets how often the Cache Index saves its metadata to the cache from application memory. Default is 5 (5s)
        # flush_interval_secs = 5

        ## max_size_bytes indicates how large the cache can grow in bytes before the Index evicts least-recently-accessed items. default is 512MB
        # max_size_bytes = 536870912

        ## max_size_backoff_bytes indicates how far below max_size_bytes the cache size must be to complete a byte-size-based eviction exercise. default is 16MB
        # max_size_backoff_bytes = 16777216

        ## max_size_objects indicates how large the cache can grow in objects before the Index evicts least-recently-accessed items. default is 0 (infinite)
        # max_size_objects = 0

        ## max_size_backoff_objects indicates how far under max_size_objects the cache size must be to complete object-size-based eviction exercise. default is 100
        # max_size_backoff_objects = 100

        ### Configuration options when using a Redis Cache
        # [caches.default.redis]

        ## client_type indicates which kind of Redis client to use. Options are: 'standard', 'cluster' and 'sentinel'
        ## default is 'standard'
        # client_type = 'standard'

        ### Supported by Redis (standard) #####################################
        ### These configurations are ignored by Redis Sentinel and Redis Cluster
        ###

        ## endpoint defines the fqdn+port or path to a unix socket file for connecting to redis
        ## default is 'redis:6379'
        # endpoint = 'redis:6379'
        #

        ### Supported by Redis Cluster and Redis Sentinel #####################
        ### These conigurations are ignored by Redis (standard)
        ###

        ## endpoints is used for Redis Cluster and Redis Sentinel to define a list of endpoints
        ## default is ['redis:6379']
        # endpoints = ['redis:6379']
        #

        ### Supported by Redis Sentinel #######################################
        ### These conigurations are ignored by Redis (standard) and Redis Cluster
        ###
        ## sentinel_master should be set when using Redis Sentinel to indicate the Master Node
        ## sentinel_master = ''
        #

        ### Supported by all Redis Client Types ###############################
        ### See the go-redis documentation at https://github.com/go-redis/redis/blob/master/options.go
        ### for more information on tuning these settings

        ## protocol defines the protocol for connecting to redis ('unix' or 'tcp'). 'tcp' is default
        # protocol = 'tcp'

        ## password provides the redis password. default is empty string ''
        # password = ''

        ## db is the Database to be selected after connecting to the server. default is 0
        # db = 0

        ## max_retries is the maximum number of retries before giving up on the command
        # max_retries = 0

        ## min_retry_backoff_ms is the minimum backoff time between each retry
        # min_retry_backoff_ms = 8

        ## max_retry_backoff_ms is the maximum backoff time between each retry
        # max_retry_backoff_ms = 512

        ## dial_timeout_ms is the timeout for establishing new connections
        # dial_timeout_ms = 5000

        ## read_timeout_ms is the timeout for socket reads. If reached, commands will fail with a timeout instead of blocking.
        # read_timeout_ms = 3000

        ## write_timeout_ms is the timeout for socket writes. If reached, commands will fail with a timeout instead of blocking.
        # write_timeout_ms = 3000

        ## pool_size is the maximum number of socket connections.
        # pool_size = 20

        ## min_idle_conns is the minimum number of idle connections which is useful when establishing new connection is slow.
        # min_idle_conns = 0

        ## max_conn_age_ms is the connection age at which client retires (closes) the connection.
        # max_conn_age_ms = 0

        ## pool_timeout_ms is the amount of time client waits for connection if all connections are busy before returning an error.
        # pool_timeout_ms = 4000

        ## idle_timeout_ms is the amount of time after which client closes idle connections.
        # idle_timeout_ms = 300000

        ## idle_check_frequency_ms is the frequency of idle checks made by idle connections reaper.
        # idle_check_frequency_ms = 60000


        ### Configuration options when using a Filesystem Cache ###############
        # [caches.default.filesystem]
        ## cache_path defines the directory location under which the Trickster cache will be maintained
        ## default is '/tmp/trickster'
        # cache_path = '/tmp/trickster'

        ### Configuration options when using a bbolt Cache ####################
        # [caches.default.bbolt]

        ## filename defines the file where the Trickster cache will be maintained
        ## default is 'trickster.db'
        # filename = 'trickster.db'

        ## bucket defines the name of the bbolt bucket (similar to a namespace) under which our key value store lives
        ## default is 'trickster'
        # bucket = 'trickster'

        ### Configuration options when using a Badger cache ###################
        # [caches.default.badger]
        ## directory defines the directory location under which the Badger data will be maintained
        ## default is '/tmp/trickster'
        # directory = '/tmp/trickster'
        ## value_directory defines the directory location under which the Badger value log will be maintained
        ## default is '/tmp/trickster'
        # value_directory = '/tmp/trickster'

    ## Example of a second cache, sans comments, that origin configs below could use with: cache_name = 'bbolt_example'
    #
    # [caches.bbolt_example]
    # cache_type = 'bbolt'

        # [caches.bbolt_example.bbolt]
        # filename = 'trickster.db'
        # bucket = 'trickster'

        # [caches.bbolt_example.index]
        # reap_interval_secs = 3
        # flush_interval_secs = 5
        # max_size_bytes = 536870912
        # size_backoff_bytes = 16777216

## Negative Caching Configurations
## A Negative Cache is a map of HTTP Status Codes that are cached for the specified duration,
## used for temporarily caching failures (e.g., 404's for 10 seconds)
##
## By default, each Origin Configuration maps to the 'default' negative cache which you can
## configure below, or can define your own negative caches, and specify them in your origin configs.
## See /docs/negative-caching.md for more info.
##

# [negative_caches]
#   [negative_caches.default]
#   # The 'default' negative cache config, mapped by all origins by default,
#   # is empty unless you populate it. Update it by adding entries here in the format of:
#   # code = ttl_secs

##  Here's a pre-populated negative cache config ready to be uncommented and used in an origin config
##  The 'general' negative cache config will cache common failure response codes for 3 seconds
#   [negative_caches.general]
#   400 = 3
#   404 = 3
#   500 = 3
#   502 = 3

# Configuration options for mapping Origin(s)
[origins]

    # example origin named default. default is always created with these settings unless a different origin is defined here.
    # access this origin via http[s]://trickster-fqdn/default/

{% if trickster_origins is defined and trickster_origins is iterable %}
{% for item in trickster_origins %}
    [origins.{{ item.origin }}]
{% if item.config is defined and item.config is iterable %}
{% for items in item.config %}
    {{ items }}
{% endfor %}
{% endif %}
{% endfor %}
{% endif %}

## Configuration Options for Tracing Instrumentation. see /docs/tracing.md for more information
# [tracing]

    ## This is the default tracing config with it's default options, which you can change here.
    ## you can also add additional tracing configs here. user-defined tracing configs are mapped
    ## to origins by the 'tracing_name' value in origin configs, which, by default, use 'default'
    # [tracing.default]

    ## implementation specifies the Tracing API that you use in your platform.
    ## options are: 'opentelemetry' (default) and 'opentracing'
    # implementation: 'opentelemetry'

    ## exporter specifies the tracing format sent to the collection system
    ## options are: jaeger, recorder, stdout or noop.  noop is the default
    # exporter = 'noop'

    ## collector is the URL of the trace collector which MUST be in the exporter format
    ## the default is empty string, meaning no traces are sent to the collector
    # collector = ''

	## An integer or floating point value of 0 to 1.0 (inclusive) is permitted.
	## sampleRate sets the probability that a span will be recorded.
    ## default is 1 (meaning 100% of requests are recorded)
	# sample_rate = 1

    ## another example tracing config named 'example' using jaeger backend and a 50% sample rate
    # [tracing.example]
    # implementation = 'opentelemetry'
    # exporter = 'jaeger'
    # collector = 'https://jaeger.example.com/'
	# sample_rate = .5

## Configuration Options for Metrics Instrumentation
# [metrics]
## listen_port defines the port that Trickster's metrics server listens on at /metrics
listen_port = {{ trickster_metrics_listen_port }}
## listen_address defines the ip that Trickster's metrics server listens on at /metrics
## empty by default, listening on all interfaces
listen_address = '{{ trickster_metrics_listen_address }}'

## Configuration Options for Logging Instrumentation
# [logging]
## log_level defines the verbosity of the logger. Possible values are 'debug', 'info', 'warn', 'error'
## default is 'info'
log_level = '{{ trickster_logging_log_level }}'

## log_file defines the file location to store logs. These will be auto-rolled and maintained for you.
## not specifying a log_file (this is the default behavior) will print logs to STDOUT
# log_file = '/some/path/to/trickster.log'
